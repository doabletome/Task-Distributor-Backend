##  Project Structure

├── server/                # Backend (Express + MongoDB)
│   ├── init.js            # DB seeding script (admin + agents)
│   ├── package.json
│   ├── .env.example
│   └── src/
│       ├── config/db.js
│       ├── controllers/
│       ├── middleware/auth.js
│       ├── models/
│       ├── routes/
│       ├── app.js
│       └── server.js


##  Prerequisites

* Node.js v14+ & npm
* MongoDB URI (local or Atlas)
* (Optional) `git` to clone the repo

---

##  Environment Variables

Copy `.env.example` to `.env` in the `server/` folder and fill in:

```
PORT=5000
MONGO_URI=<your-mongodb-connection-string>
JWT_SECRET=<your-jwt-secret>
```

---

##  Backend Setup

1. **Install dependencies**

   
   cd server
   npm install
   

2. **Seed the database** (creates one Admin + 5 dummy Agents)

   
   npm run init-db
   

3. **Start in development**

   
   npm run dev
   

   * Server listens on `http://localhost:5000`

4. **Available API scripts**

   * `npm start` — run without hot-reload
   * `npm run dev` — run with nodemon

---

##  Workflow

1. **Admin Login**

   * Email: `admin@example.com`
   * Password: `adminpass`

2. **Agents Management**

   * Create new agents via the “Add Agent” form.
   * View all agents in a responsive grid.

3. **CSV Upload & Distribute**

   * Prepare a CSV with columns `FirstName,Phone,Notes`.
   * Upload under “Upload CSV” and the system evenly assigns rows to agents.

4. **Agent View**

   * Agents log in with their seeded credentials (e.g. `agent1@example.com` / `agentpass`).
   * They see only their assigned tasks under “My Tasks.”

---

##  Usage Notes

* All protected routes require a valid JWT stored in `localStorage`.
* Frontend automatically attaches the token via Axios interceptor.
* Any network or validation errors surface inline as banners or field errors.

---

##  Technologies

* **Backend**: Node.js, Express, MongoDB (Mongoose), JWT, Multer, csv-parse
* **Frontend**: React, Vite, Tailwind CSS, React Router v6, Axios

